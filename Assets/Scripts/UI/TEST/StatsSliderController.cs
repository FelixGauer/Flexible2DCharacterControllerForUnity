using UnityEngine;
using UnityEngine.UIElements;
using System.Collections.Generic;

/// <summary>
/// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ UI —Å–ª–∞–π–¥–µ—Ä–æ–≤ —Å–æ —Å—Ç–∞—Ç–∞–º–∏ –∏–≥—Ä–æ–∫–∞
/// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—é—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∑–Ω–∞—á–µ–Ω–∏–π
/// </summary>
public class StatsSliderController : MonoBehaviour
{
    [Header("UI Setup")]
    [SerializeField] private UIDocument uiDocument;
    
    [Header("Stats Reference")]
    [SerializeField] private PlayerControllerStats playerStats;
    
    [Header("Slider Configuration")]
    [SerializeField] private List<SliderStatBinding> sliderBindings = new List<SliderStatBinding>
    {
        new SliderStatBinding("MovementRoot", "MySlider", "MoveSpeed"),
        new SliderStatBinding("MovementRoot", "MySlider2", "WalkAcceleration"),
        new SliderStatBinding("MovementRoot", "MySlider3", "WalkDeceleration")
    };

    private VisualElement _root;
    private readonly Dictionary<Slider, SliderStatBinding> _sliderBindingMap = new Dictionary<Slider, SliderStatBinding>();
    private bool _isInitializing = false;

    #region Unity Lifecycle
    
    private void Awake()
    {
        ValidateReferences();
        InitializeUI();
    }

    private void OnEnable()
    {
        RegisterSliderCallbacks();
        SynchronizeSlidersFromStats();
    }

    private void OnDisable()
    {
        UnregisterSliderCallbacks();
    }

    #endregion

    #region Initialization

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Å—ã–ª–æ–∫
    /// </summary>
    private void ValidateReferences()
    {
        if (uiDocument == null)
            uiDocument = GetComponent<UIDocument>();

        if (uiDocument == null)
        {
            Debug.LogError($"[{gameObject.name}] UIDocument –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ UIDocument –∫ GameObject.", this);
            enabled = false;
            return;
        }

        if (playerStats == null)
        {
            Debug.LogError($"[{gameObject.name}] PlayerControllerStats –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω! –ù–∞–∑–Ω–∞—á—å—Ç–µ ScriptableObject —Å–æ —Å—Ç–∞—Ç–∞–º–∏.", this);
            enabled = false;
            return;
        }
    }

    /// <summary>
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç UI —ç–ª–µ–º–µ–Ω—Ç—ã
    /// </summary>
    private void InitializeUI()
    {
        _root = uiDocument.rootVisualElement;
        
        if (_root == null)
        {
            Debug.LogError($"[{gameObject.name}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç UI.", this);
            enabled = false;
        }
    }

    #endregion

    #region Slider Management

    /// <summary>
    /// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤—Å–µ—Ö —Å–ª–∞–π–¥–µ—Ä–æ–≤
    /// </summary>
    private void RegisterSliderCallbacks()
    {
        _sliderBindingMap.Clear();

        foreach (var binding in sliderBindings)
        {
            var slider = FindSlider(binding);
            if (slider != null)
            {
                _sliderBindingMap[slider] = binding;
                slider.RegisterValueChangedCallback(OnSliderValueChanged);
                
                Debug.Log($"‚úì –°–ª–∞–π–¥–µ—Ä '{binding.SliderName}' –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ '{binding.ContainerName}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å—Ç–∞—Ç—É '{binding.StatFieldName}'");
            }
        }

        Debug.Log($"[StatsSliderController] –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {_sliderBindingMap.Count} —Å–ª–∞–π–¥–µ—Ä–æ–≤ –∏–∑ {sliderBindings.Count} –∑–∞–¥–∞–Ω–Ω—ã—Ö.");
    }

    /// <summary>
    /// –û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    /// </summary>
    private void UnregisterSliderCallbacks()
    {
        foreach (var kvp in _sliderBindingMap)
        {
            if (kvp.Key != null)
                kvp.Key.UnregisterValueChangedCallback(OnSliderValueChanged);
        }
        
        _sliderBindingMap.Clear();
    }

    /// <summary>
    /// –ù–∞—Ö–æ–¥–∏—Ç —Å–ª–∞–π–¥–µ—Ä –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–µ
    /// </summary>
    private Slider FindSlider(SliderStatBinding binding)
    {
        if (string.IsNullOrEmpty(binding.ContainerName))
        {
            // –ò—â–µ–º —Å–ª–∞–π–¥–µ—Ä –Ω–∞–ø—Ä—è–º—É—é –≤ –∫–æ—Ä–Ω–µ
            var slider = _root.Q<Slider>(binding.SliderName);
            if (slider == null)
                Debug.LogWarning($"‚ö† –°–ª–∞–π–¥–µ—Ä '{binding.SliderName}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ.");
            return slider;
        }
        else
        {
            // –ò—â–µ–º —Å–ª–∞–π–¥–µ—Ä –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
            var container = _root.Q<VisualElement>(binding.ContainerName);
            if (container == null)
            {
                Debug.LogWarning($"‚ö† –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä '{binding.ContainerName}' –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                return null;
            }

            var slider = container.Q<Slider>(binding.SliderName);
            if (slider == null)
                Debug.LogWarning($"‚ö† –°–ª–∞–π–¥–µ—Ä '{binding.SliderName}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ '{binding.ContainerName}'.");
            
            return slider;
        }
    }

    #endregion

    #region Value Synchronization

    /// <summary>
    /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–æ–≤ —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    /// </summary>
    private void SynchronizeSlidersFromStats()
    {
        _isInitializing = true;
        
        foreach (var kvp in _sliderBindingMap)
        {
            var slider = kvp.Key;
            var binding = kvp.Value;
            
            var statValue = GetStatValue(binding.StatFieldName);
            if (statValue.HasValue)
            {
                slider.value = statValue.Value;
                Debug.Log($"üîÑ –°–ª–∞–π–¥–µ—Ä '{binding.SliderName}' —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º —Å—Ç–∞—Ç–∞ '{binding.StatFieldName}': {statValue.Value:F2}");
            }
        }
        
        _isInitializing = false;
        Debug.Log("[StatsSliderController] –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–∞
    /// </summary>
    private void OnSliderValueChanged(ChangeEvent<float> evt)
    {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –≤–æ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if (_isInitializing)
            return;

        var slider = (Slider)evt.currentTarget;
        
        if (_sliderBindingMap.TryGetValue(slider, out var binding))
        {
            SetStatValue(binding.StatFieldName, evt.newValue);
            
            Debug.Log($"üìä –°—Ç–∞—Ç '{binding.StatFieldName}' –∏–∑–º–µ–Ω–µ–Ω —á–µ—Ä–µ–∑ —Å–ª–∞–π–¥–µ—Ä '{binding.SliderName}': {evt.previousValue:F2} ‚Üí {evt.newValue:F2}");
        }
    }

    #endregion

    #region Stats Access

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—è
    /// </summary>
    private float? GetStatValue(string fieldName)
    {
        var field = typeof(PlayerControllerStats).GetField(fieldName);
        if (field != null && field.FieldType == typeof(float))
        {
            return (float)field.GetValue(playerStats);
        }
        
        Debug.LogError($"‚ùå –ü–æ–ª–µ '{fieldName}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –≤ PlayerControllerStats.");
        return null;
    }

    /// <summary>
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—è
    /// </summary>
    private void SetStatValue(string fieldName, float value)
    {
        var field = typeof(PlayerControllerStats).GetField(fieldName);
        if (field != null && field.FieldType == typeof(float))
        {
            field.SetValue(playerStats, value);
        }
        else
        {
            Debug.LogError($"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{fieldName}' –≤ PlayerControllerStats.");
        }
    }

    #endregion

    #region Public API

    /// <summary>
    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å–ª–∞–π–¥–µ—Ä—ã —Å–æ —Å—Ç–∞—Ç–∞–º–∏
    /// </summary>
    [ContextMenu("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–ª–∞–π–¥–µ—Ä—ã —Å–æ —Å—Ç–∞—Ç–∞–º–∏")]
    public void ForceSynchronizeSliders()
    {
        if (!enabled || _sliderBindingMap.Count == 0)
        {
            Debug.LogWarning("[StatsSliderController] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é - –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤.");
            return;
        }

        SynchronizeSlidersFromStats();
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –ø—Ä–∏–≤—è–∑–∫—É —Å–ª–∞–π–¥–µ—Ä–∞ –∫ —Å—Ç–∞—Ç—É –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    /// </summary>
    public void AddSliderBinding(string containerName, string sliderName, string statFieldName)
    {
        var newBinding = new SliderStatBinding(containerName, sliderName, statFieldName);
        sliderBindings.Add(newBinding);
        
        if (enabled && _root != null)
        {
            var slider = FindSlider(newBinding);
            if (slider != null)
            {
                _sliderBindingMap[slider] = newBinding;
                slider.RegisterValueChangedCallback(OnSliderValueChanged);
                
                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–ª–∞–π–¥–µ—Ä
                var statValue = GetStatValue(statFieldName);
                if (statValue.HasValue)
                {
                    _isInitializing = true;
                    slider.value = statValue.Value;
                    _isInitializing = false;
                }
                
                Debug.Log($"‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏–≤—è–∑–∫–∞: {sliderName} ‚Üí {statFieldName}");
            }
        }
    }

    #endregion
}

/// <summary>
/// –ö–ª–∞—Å—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ —Å–ª–∞–π–¥–µ—Ä–∞ –∫ —Å—Ç–∞—Ç—É
/// </summary>
[System.Serializable]
public class SliderStatBinding
{
    [Tooltip("–ò–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ —Å–ª–∞–π–¥–µ—Ä (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∫–æ—Ä–Ω–µ)")]
    public string ContainerName;
    
    [Tooltip("–ò–º—è —Å–ª–∞–π–¥–µ—Ä–∞ –≤ UI")]
    public string SliderName;
    
    [Tooltip("–ò–º—è –ø–æ–ª—è –≤ PlayerControllerStats")]
    public string StatFieldName;

    public SliderStatBinding() { }

    public SliderStatBinding(string containerName, string sliderName, string statFieldName)
    {
        ContainerName = containerName;
        SliderName = sliderName;
        StatFieldName = statFieldName;
    }

    public override string ToString()
    {
        return $"{ContainerName}/{SliderName} ‚Üí {StatFieldName}";
    }
}